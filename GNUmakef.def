# Include file for GNU C++ build

ifndef PLATFORM

ifeq ($(findstring darwin, $(OSTYPE)), darwin)
PLATFORM=osx
endif

endif  # ifndef PLATFORM

ifeq ($(PLATFORM),osx) # Mac OSX
CAT=cat
SED=sed
GREP=grep
ifndef CC
CC=gcc
endif
ifndef CXX
CXX=g++
endif
AR=ar
RANLIB=ranlib
PLATFORM=osx
EXEEXT=
OBJEXT=.o
LIBEXT=.a
ifeq ($(WIDE_NCURSES),1)
LIBCURSES=-lncursesw
else
LIBCURSES=-lncurses
endif
CFLAGS+=-DHAVE_SNPRINTF -DHAVE_VSNPRINTF -DHAVE_STDARG_H
else                   # Linux, *BSD or another unix-like OS
CAT=cat
SED=sed
GREP=grep
ifndef CC
CC=gcc
endif
ifndef CXX
CXX=g++
endif
AR=ar
RANLIB=ranlib
PLATFORM=lnx
EXEEXT=
OBJEXT=.o
LIBEXT=.a
CFLAGS+=-DHAVE_SNPRINTF -DHAVE_VSNPRINTF -DHAVE_STDARG_H
ifeq ($(WIDE_NCURSES),1)
CFLAGS+=-I/usr/include/ncursesw/
LIBCURSES=-lncursesw
else
LIBCURSES=-lncurses
endif
endif

CFLAGS+=-funsigned-char -g $(INCS) -Wall -Wno-long-long -Wno-sign-compare -pedantic -O2 -DPRAGMA_PACK # -fomit-frame-pointer
LNKFLAGS+=-g
CPPFLAGS+=$(CFLAGS)

# Run `make USE_NCURSES=0` if you dislike ncurses
# Run `make BUGGY_NCURSES=1` if your build requires additional keypresses to
# pass areascan
# NOTE: lnx is active for any *NIX system and only ncurses mode is portable
USE_NCURSES?=1
BUGGY_NCURSES?=0

ifeq ($(PLATFORM),lnx)
ifeq ($(USE_NCURSES),1)
CPPFLAGS+=-D__USE_NCURSES__
ifeq ($(BUGGY_NCURSES),1)
CPPFLAGS+=-DBUGGY_NCURSES
endif
endif
endif

ifeq ($(PLATFORM),osx)
ifeq ($(USE_NCURSES),1)
CPPFLAGS+=-D__USE_NCURSES__
endif
endif

# uncomment the next line for better koi-8 support. do not do it for
# international builds since latin-1 support will be broken.
ifeq ($(PLATFORM),lnx)
ifeq ($(KOI8),1)
CPPFLAGS+=-DKOI8
endif
endif
ifeq "$(ICONV)" "1"
CFLAGS+=-DHAS_ICONV
endif

BIN=bin
OBJPATH=obj
LIBPATH=lib
